// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: server.proto

package employmentService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmploymentCenter_RegisterCompany_FullMethodName             = "/EmploymentCenter/RegisterCompany"
	EmploymentCenter_UpdateEmployeeSalaryByEmail_FullMethodName = "/EmploymentCenter/UpdateEmployeeSalaryByEmail"
	EmploymentCenter_RegisterEmployee_FullMethodName            = "/EmploymentCenter/RegisterEmployee"
	EmploymentCenter_CreateNewDepartment_FullMethodName         = "/EmploymentCenter/CreateNewDepartment"
	EmploymentCenter_EmployPerson_FullMethodName                = "/EmploymentCenter/EmployPerson"
	EmploymentCenter_GetEmployeeInfoByEmail_FullMethodName      = "/EmploymentCenter/GetEmployeeInfoByEmail"
)

// EmploymentCenterClient is the client API for EmploymentCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmploymentCenterClient interface {
	RegisterCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	UpdateEmployeeSalaryByEmail(ctx context.Context, in *ByEmailRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	RegisterEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	CreateNewDepartment(ctx context.Context, in *DepartmentRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	EmployPerson(ctx context.Context, in *EmploymentRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	GetEmployeeInfoByEmail(ctx context.Context, in *ByEmailRequest, opts ...grpc.CallOption) (*EmployeeInfo, error)
}

type employmentCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewEmploymentCenterClient(cc grpc.ClientConnInterface) EmploymentCenterClient {
	return &employmentCenterClient{cc}
}

func (c *employmentCenterClient) RegisterCompany(ctx context.Context, in *CompanyRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, EmploymentCenter_RegisterCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employmentCenterClient) UpdateEmployeeSalaryByEmail(ctx context.Context, in *ByEmailRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, EmploymentCenter_UpdateEmployeeSalaryByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employmentCenterClient) RegisterEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, EmploymentCenter_RegisterEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employmentCenterClient) CreateNewDepartment(ctx context.Context, in *DepartmentRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, EmploymentCenter_CreateNewDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employmentCenterClient) EmployPerson(ctx context.Context, in *EmploymentRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, EmploymentCenter_EmployPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employmentCenterClient) GetEmployeeInfoByEmail(ctx context.Context, in *ByEmailRequest, opts ...grpc.CallOption) (*EmployeeInfo, error) {
	out := new(EmployeeInfo)
	err := c.cc.Invoke(ctx, EmploymentCenter_GetEmployeeInfoByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmploymentCenterServer is the server API for EmploymentCenter service.
// All implementations should embed UnimplementedEmploymentCenterServer
// for forward compatibility
type EmploymentCenterServer interface {
	RegisterCompany(context.Context, *CompanyRequest) (*BasicResponse, error)
	UpdateEmployeeSalaryByEmail(context.Context, *ByEmailRequest) (*BasicResponse, error)
	RegisterEmployee(context.Context, *EmployeeRequest) (*BasicResponse, error)
	CreateNewDepartment(context.Context, *DepartmentRequest) (*BasicResponse, error)
	EmployPerson(context.Context, *EmploymentRequest) (*BasicResponse, error)
	GetEmployeeInfoByEmail(context.Context, *ByEmailRequest) (*EmployeeInfo, error)
}

// UnimplementedEmploymentCenterServer should be embedded to have forward compatible implementations.
type UnimplementedEmploymentCenterServer struct {
}

func (UnimplementedEmploymentCenterServer) RegisterCompany(context.Context, *CompanyRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCompany not implemented")
}
func (UnimplementedEmploymentCenterServer) UpdateEmployeeSalaryByEmail(context.Context, *ByEmailRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeeSalaryByEmail not implemented")
}
func (UnimplementedEmploymentCenterServer) RegisterEmployee(context.Context, *EmployeeRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEmployee not implemented")
}
func (UnimplementedEmploymentCenterServer) CreateNewDepartment(context.Context, *DepartmentRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewDepartment not implemented")
}
func (UnimplementedEmploymentCenterServer) EmployPerson(context.Context, *EmploymentRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmployPerson not implemented")
}
func (UnimplementedEmploymentCenterServer) GetEmployeeInfoByEmail(context.Context, *ByEmailRequest) (*EmployeeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeInfoByEmail not implemented")
}

// UnsafeEmploymentCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmploymentCenterServer will
// result in compilation errors.
type UnsafeEmploymentCenterServer interface {
	mustEmbedUnimplementedEmploymentCenterServer()
}

func RegisterEmploymentCenterServer(s grpc.ServiceRegistrar, srv EmploymentCenterServer) {
	s.RegisterService(&EmploymentCenter_ServiceDesc, srv)
}

func _EmploymentCenter_RegisterCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmploymentCenterServer).RegisterCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmploymentCenter_RegisterCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmploymentCenterServer).RegisterCompany(ctx, req.(*CompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmploymentCenter_UpdateEmployeeSalaryByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmploymentCenterServer).UpdateEmployeeSalaryByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmploymentCenter_UpdateEmployeeSalaryByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmploymentCenterServer).UpdateEmployeeSalaryByEmail(ctx, req.(*ByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmploymentCenter_RegisterEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmploymentCenterServer).RegisterEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmploymentCenter_RegisterEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmploymentCenterServer).RegisterEmployee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmploymentCenter_CreateNewDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmploymentCenterServer).CreateNewDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmploymentCenter_CreateNewDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmploymentCenterServer).CreateNewDepartment(ctx, req.(*DepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmploymentCenter_EmployPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmploymentCenterServer).EmployPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmploymentCenter_EmployPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmploymentCenterServer).EmployPerson(ctx, req.(*EmploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmploymentCenter_GetEmployeeInfoByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmploymentCenterServer).GetEmployeeInfoByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmploymentCenter_GetEmployeeInfoByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmploymentCenterServer).GetEmployeeInfoByEmail(ctx, req.(*ByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmploymentCenter_ServiceDesc is the grpc.ServiceDesc for EmploymentCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmploymentCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmploymentCenter",
	HandlerType: (*EmploymentCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCompany",
			Handler:    _EmploymentCenter_RegisterCompany_Handler,
		},
		{
			MethodName: "UpdateEmployeeSalaryByEmail",
			Handler:    _EmploymentCenter_UpdateEmployeeSalaryByEmail_Handler,
		},
		{
			MethodName: "RegisterEmployee",
			Handler:    _EmploymentCenter_RegisterEmployee_Handler,
		},
		{
			MethodName: "CreateNewDepartment",
			Handler:    _EmploymentCenter_CreateNewDepartment_Handler,
		},
		{
			MethodName: "EmployPerson",
			Handler:    _EmploymentCenter_EmployPerson_Handler,
		},
		{
			MethodName: "GetEmployeeInfoByEmail",
			Handler:    _EmploymentCenter_GetEmployeeInfoByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
